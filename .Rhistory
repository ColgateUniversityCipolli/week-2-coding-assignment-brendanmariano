print(i)
for i in 5
for (i in 5)
print(i)
for (i in 5)
print(i)
for (i in 1:5)
print(i)
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Left"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*(increments.x))
}
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Left"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*(increments.x)))
}
}else if(method == "Right"){
area = 0
increments.x = (b-a)/n.rect
#Loop is the same as above but adds increments.x each fnct call in order to find the right
#Kept both loops starting at zero for consistency
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + increments.x))
}
}else if(method == "Midpoint")
{
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + .5*increments.x))
}
}else if(method == "Trapezoidial"){
area = 0
increments.x = (b-a)/n.rect
#averages the two values and adds to area
#Averages the two heights and multiplies that by the width of each section
for(i in 0:n.rect)
{
left.val = (fnct(a + i*increments.x))
right.val = (fnct(a + i*increments.x + increments.x))
area = area + .5*increments.x*(left.val + right.val)
}
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Left"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*(increments.x)))
}
}else if(method == "Right"){
area = 0
increments.x = (b-a)/n.rect
#Loop is the same as above but adds increments.x each fnct call in order to find the right
#Kept both loops starting at zero for consistency
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + increments.x))
}
}else if(method == "Midpoint")
{
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + .5*increments.x))
}
}else if(method == "Trapezoidial"){
area = 0
increments.x = (b-a)/n.rect
#averages the two values and adds to area
#Averages the two heights and multiplies that by the width of each section
for(i in 0:n.rect)
{
left.val = (fnct(a + i*increments.x))
right.val = (fnct(a + i*increments.x + increments.x))
area = area + .5*increments.x*(left.val + right.val)
}
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
integrand <- function(x){
f <- 7 - 2 * x^2
return(f)
}
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Left"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*(increments.x)))
}
}else if(method == "Right"){
area = 0
increments.x = (b-a)/n.rect
#Loop is the same as above but adds increments.x each fnct call in order to find the right
#Kept both loops starting at zero for consistency
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + increments.x))
}
}else if(method == "Midpoint")
{
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + .5*increments.x))
}
}else if(method == "Trapezoidial"){
area = 0
increments.x = (b-a)/n.rect
#averages the two values and adds to area
#Averages the two heights and multiplies that by the width of each section
for(i in 0:n.rect)
{
left.val = (fnct(a + i*increments.x))
right.val = (fnct(a + i*increments.x + increments.x))
area = area + .5*increments.x*(left.val + right.val)
}
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
######################################
# Compare to numerical integral
######################################
integrate(f = integrand, # integrate() is an R function
lower = 0,     # that completes numerical
upper = 2)     # integration
{
print(i)
}
left.val = (fnct(a + i*increments.x))
integrand <- function(x){
f <- 7 - 2 * x^2
return(f)
}
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Trapezoidial"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*(increments.x)))
}
}else if(method == "Right"){
area = 0
increments.x = (b-a)/n.rect
#Loop is the same as above but adds increments.x each fnct call in order to find the right
#Kept both loops starting at zero for consistency
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + increments.x))
}
}else if(method == "Midpoint")
{
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + .5*increments.x))
}
}else if(method == "Trapezoidial"){
area = 0
increments.x = (b-a)/n.rect
#averages the two values and adds to area
#Averages the two heights and multiplies that by the width of each section
for(i in 0:n.rect)
{
if(i >= 199)
{
print(i)
}
left.val = (fnct(a + i*increments.x))
right.val = (fnct(a + i*increments.x + increments.x))
area = area + .5*increments.x*(left.val + right.val)
}
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
######################################
# Compare to numerical integral
######################################
integrate(f = integrand, # integrate() is an R function
lower = 0,     # that completes numerical
upper = 2)     # integration
integrand <- function(x){
f <- 7 - 2 * x^2
return(f)
}
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Trapezoidial"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*(increments.x)))
}
}else if(method == "Right"){
area = 0
increments.x = (b-a)/n.rect
#Loop is the same as above but adds increments.x each fnct call in order to find the right
#Kept both loops starting at zero for consistency
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + increments.x))
}
}else if(method == "Midpoint")
{
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + .5*increments.x))
}
}else if(method == "Trapezoidial"){
area = 0
increments.x = (b-a)/n.rect
#averages the two values and adds to area
#Averages the two heights and multiplies that by the width of each section
for(i in 0:n.rect)
{
if(i >= 199)
{
print(i)
}
left.val = (fnct(a + i*increments.x))
right.val = (fnct(a + i*increments.x + increments.x))
area = area + .5*increments.x*(left.val + right.val)
}
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
######################################
# Compare to numerical integral
######################################
integrate(f = integrand, # integrate() is an R function
lower = 0,     # that completes numerical
upper = 2)     # integration
integrand <- function(x){
f <- 7 - 2 * x^2
return(f)
}
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Trapezoidial"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*(increments.x)))
}
}else if(method == "Right"){
area = 0
increments.x = (b-a)/n.rect
#Loop is the same as above but adds increments.x each fnct call in order to find the right
#Kept both loops starting at zero for consistency
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + increments.x))
}
}else if(method == "Midpoint")
{
area = 0
increments.x = (b-a)/n.rect
for(i in 0:n.rect)
{
area = area + increments.x*(fnct(a + i*increments.x + .5*increments.x))
}
}else if(method == "Trapezoidial"){
area = 0
increments.x = (b-a)/n.rect
#averages the two values and adds to area
#Averages the two heights and multiplies that by the width of each section
for(i in 0:n.rect)
{
if(i >= 199)
{
print(i)
}
left.val = (fnct(a + i*increments.x))
right.val = (fnct(a + i*increments.x + increments.x))
area = area + .5*increments.x*(left.val + right.val)
}
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
######################################
# Compare to numerical integral
######################################
integrate(f = integrand, # integrate() is an R function
lower = 0,     # that completes numerical
upper = 2)     # integration
